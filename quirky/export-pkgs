#!/bin/bash
#(c) Copyright 2023 Barry Kauler.
#license GPLv3+
#20221218 based on 0pre-oe in woofQ.
#20231107 search for DEPENDS and RDEPENDS in .bbappends files also. DEPENDS_ now DEPENDS:
#20240127 separate build-number from DB_version
#20240531 change DISTRO_COMPAT_VERSION from kirkstone to scarthgap
#20240531 annoying, revision number no longer in tmp/work/* folder name.

export LANG=C #faster.

if [ ! $1 ];then
 echo 'Please specify the architecture to be exported.
ex: "amd64" as in folder "build-amd64"'
 exit
fi
if [ ! -d build-${1} ];then
 echo 'Please specify the architecture to be exported.
ex: "amd64" as in folder "build-amd64"'
 exit
fi
BUILDFOLDER="build-${1}"
OEPATH="$(pwd)"

if [ "$(whoami)" != "root" ];then
 echo "Must run as root."
 exit
fi

#20240531 get PR...
PR="$(grep '^PR = "' ${BUILDFOLDER}/conf/local.conf | cut -f 2 -d '"')"

#temp folder...
rm -rf /tmp/0pre-oe 2>/dev/null
mkdir /tmp/0pre-oe

if [ ! -e find_cat ];then
 mkdir /tmp/0pre-oe/build
 #note: bacon 3.9.3 required...
 bacon -a -d /tmp/0pre-oe/build find_cat.bac
 if [ ! -e /tmp/0pre-oe/build/find_cat ];then
  echo "Error compiling find_cat.bac"
  exit
 fi
 cp -a /tmp/0pre-oe/build/find_cat ./
 strip --strip-unneeded find_cat
fi
FIND_CAT="./find_cat"

#EasyOS will already have this. The pups will also, but may be different...
mkdir -p /usr/local/petget
cp -f categories.dat /usr/local/petget/

DISTRO_COMPAT_VERSION=scarthgap #***SET THIS***
WOOF_TARGETARCH="${1}"

#this is where binary packages will be placed...
mkdir -p ../packages-oe-${DISTRO_COMPAT_VERSION}
rm -f ../packages-oe-${DISTRO_COMPAT_VERSION}/*.tar.xz 2>/dev/null
#and the EasyOS db file...
rm -f ../Packages-oe-${DISTRO_COMPAT_VERSION}-official 2>/dev/null
PKGLISTS_COMPAT="../Packages-oe-${DISTRO_COMPAT_VERSION}-official"

#EasyOS pkg db format:
#pkgname|nameonly|version|pkgrelease|category[;subcategory]|size|path|fullfilename|dependencies|description|
#ex: abiword-1.2.4|abiword|1.2.4|5|Document|999K|slackware/ab|abiword-1.2.4-5-i486.tgz|+aiksausus,+gtk2|a nice wordprocessor|
#optionally on the end: compileddistro|compiledrelease|repo| (fields 11,12,13)
#ex: oe|kirkstone|official|
#this is not normally needed, as the name of the file holding the database info, for ex
#'Packages-oe-kirkstone-official' identifies this extra information.

echo "This script is for a developer who has compiled with OpenEmbedded."
echo "This script will export binary packages and create a Puppy standard"
echo "package database."

#find the cross-build 'strip' executable in oe... (for aarch64 build it will be aarch64-poky-linux-strip)
CROSS_STRIP_FND="$(find ${OEPATH}/${BUILDFOLDER}/tmp/sysroots-components -type f -name '*-strip' | grep '/binutils\-cross\-' | head -n 1)"
if [ "$CROSS_STRIP_FND" ];then
 CROSSSTRIP="$(basename $CROSS_STRIP_FND)"
 if [ ! -e ./${CROSSSTRIP} ];then
  cp -a -f ${CROSS_STRIP_FND} ./
 fi
else
 echo "ERROR: unable to find the cross-strip executable in OE, aborting"
 exit 2
fi

#.bb recipe files may have "DEPENDS =" value over multiple lines...
expand_lines_func() {
 #pass in name of file to process
 NEW="$(cat ${1} | sed -e 's%|%ZZZZZZ%g' | tr '\n' '|' | sed -e 's%\\|%%g' | sed -e 's%|%\n%g' | sed -e 's%ZZZZZZ%|%g')"
 echo "$NEW" > ${1}
}

#folders...
DEBFOLDERS="$(ls -1 ${OEPATH}/${BUILDFOLDER}/tmp/deploy/deb | grep -v 'deb\.lock' | tr '\n' ' ')"
# ...ex: all genericx86_64 nocona-64

echo 'Creating a lookup table, generic name to split-names...'
echo -n '' > /tmp/0pre-oe/0pre-oe-split2gen-names
for ACAT in $DEBFOLDERS
do
 [ ! -d ${OEPATH}/${BUILDFOLDER}/tmp/deploy/deb/${ACAT} ] && continue #may have file 'deb.lock'
 NAMEPATHS="$(find ${OEPATH}/${BUILDFOLDER}/tmp/work/${ACAT}-*-linux -mindepth 1 -maxdepth 1 -type d | tr '\n' ' ')"
 # ...ex: /mnt/nvme0n1p6/oe-kirkstone/oe-quirky/build-amd64/tmp/work/nocona-64-poky-linux/alsa-lib
 for AGENPATH in $NAMEPATHS
 do
  AGENNAME="$(basename $AGENPATH)" #ex: alsa-lib
  AVER="$(find $AGENPATH -mindepth 1 -maxdepth 1 -type d | head -n 1 | rev | cut -f 1 -d '/' | rev)" #ex: 1.1.3-r0
  ASPLITNAMES="$(find ${AGENPATH}/${AVER}/packages-split -mindepth 1 -maxdepth 1 -type d 2>/dev/null | rev | cut -f 1 -d '/' | rev | tr '\n' ' ')"
  #...ex: alsa-conf alsa-doc alsa-lib alsa-lib-dbg alsa-lib-dev alsa-lib-doc alsa-lib-locale alsa-lib-staticdev
  echo "${AGENNAME}|${AVER} ${ASPLITNAMES} " >> /tmp/0pre-oe/0pre-oe-split2gen-names
 done
done

#find recipe (.bb file) for each generic name, hence lookup pkg details...
echo
echo 'Extracting homepage, description and dependencies for all pkgs...'
METADIRS="$(find ${OEPATH} -mindepth 1 -maxdepth 1 -type d -name 'meta*' | tr '\n' ' ')"
echo -n '' > /tmp/0pre-oe/0pre-oe-descriptions0
echo -n '' > /tmp/0pre-oe/0pre-oe-homepages0
echo -n '' > /tmp/0pre-oe/0pre-oe-dependencies0
for AGENVER in `cat /tmp/0pre-oe/0pre-oe-split2gen-names | cut -f 1 -d ' ' | tr '\n' ' '`
do
 AGENNAME="$(echo -n $AGENVER | cut -f 1 -d '|')"
 AVER="$(echo -n $AGENVER | cut -f 2 -d '|')"
 for AMETA in ${METADIRS}
 do
  echo -n '.'
  BB1="$(find ${AMETA} -type f -name "${AGENNAME}_*.bb")"
  [ ! "$BB1" ] && BB1="$(find ${AMETA} -type f -name "${AGENNAME}.bb")" #only one i know of is libreoffice.bb
  if [ "$BB1" ];then
   BB2a="$(echo "$BB1" | head -n 1)"
   #convert multilines to single line...
   cp -f $BB2a /tmp/0pre-oe/0pre-oe-bb2
   expand_lines_func /tmp/0pre-oe/0pre-oe-bb2
   BB2='/tmp/0pre-oe/0pre-oe-bb2'
   BBPATH="$(dirname $BB2a)"
   INC="$(find ${BBPATH} -mindepth 1 -maxdepth 1 -type f -name "${AGENNAME}*.inc" | head -n 1)"
   if [ "$INC" ];then
    #convert multilines to single line...
    cp -f $INC /tmp/0pre-oe/0pre-oe-inc
    expand_lines_func /tmp/0pre-oe/0pre-oe-inc
    INC='/tmp/0pre-oe/0pre-oe-inc'
   fi
   #20231107 if a .bbappend exists...
   BBAPPEND="$(find ${OEPATH}/meta-quirky -type f -name "${AGENNAME}_%.bbappend" -o -name "${AGENNAME}_${AVER}.bbappend" | head -n 1)"
   if [ "$BBAPPEND" ];then
    #convert multilines to single line...
    cp -f $BBAPPEND /tmp/0pre-oe/0pre-oe-bbappend
    expand_lines_func /tmp/0pre-oe/0pre-oe-bbappend
    BBAPPEND='/tmp/0pre-oe/0pre-oe-bbappend'
   fi
   ASUMMARY="$(grep '^SUMMARY = ' ${BB2} ${INC} | head -n 1 | cut -f 2 -d '"')"
   AHOMEPAGE="$(grep '^HOMEPAGE = ' ${BB2} ${INC} | head -n 1 | cut -f 2 -d '"')"
   #also include RDEPENDS...  20231107...
   ADEPENDS="$(grep -E '^DEPENDS = |^DEPENDS:append = |^DEPENDS \+= |^DEPENDS:\${PN} = |^DEPENDS:\${PN} \+= |^RDEPENDS = |^RDEPENDS:append = |^RDEPENDS \+= |^RDEPENDS:\${PN} = |^RDEPENDS:\${PN} \+= ' ${BB2} ${INC} ${BBAPPEND} | cut -f 2 -d '"' | tr '\t' ' ' | tr '\n' ' ' | tr -s ' ')"
   [ "$ASUMMARY" ] && echo "${AGENNAME} ${ASUMMARY}" >> /tmp/0pre-oe/0pre-oe-descriptions0
   [ "$AHOMEPAGE" ] && echo "${AGENNAME} ${AHOMEPAGE}" >> /tmp/0pre-oe/0pre-oe-homepages0
   if [ "$ADEPENDS" ];then #fix...
    zADEPENDS="$(echo -n "$ADEPENDS" | sed -e 's%{[^}]*}%%g' | tr -d "'" | tr -s ' ' | tr ' ' '\n' | grep -v -E ',|\$|\)|}|\(' | rev | cut -f 1 -d '/' | rev | grep -v -E '\-native$|\-cross$|packagegroup\-' | sort -u | tr '\n' ' ' | tr -s ' ')" #'
    echo "${AGENNAME} ${zADEPENDS}" >> /tmp/0pre-oe/0pre-oe-dependencies0
   fi
  fi
 done
done
sync
sort -u -t ' ' -k 1,1 /tmp/0pre-oe/0pre-oe-descriptions0 > /tmp/0pre-oe/0pre-oe-descriptions
sort -u -t ' ' -k 1,1 /tmp/0pre-oe/0pre-oe-homepages0 > /tmp/0pre-oe/0pre-oe-homepages
sort -u -t ' ' -k 1,1 /tmp/0pre-oe/0pre-oe-dependencies0 > /tmp/0pre-oe/0pre-oe-dependencies
echo
echo '...created /tmp/0pre-oe/0pre-oe-descriptions, -homepages, -dependencies'

#find all the packages. do not use the split DEBs...
echo
echo "Finding packages in OE..."
echo -n '' > ../PKGS_HOMEPAGES
echo -n '' > $PKGLISTS_COMPAT
DB_pkgrelease=''
for aCAT in $DEBFOLDERS
do
 [ ! -d ${OEPATH}/${BUILDFOLDER}/tmp/deploy/deb/${aCAT} ] && continue #may have file 'deb.lock'
 
 IMGPATHS="$(find ${OEPATH}/${BUILDFOLDER}/tmp/work/${aCAT}-*-linux -mindepth 3 -maxdepth 3 -type d -name image | tr '\n' ' ')"
 for aIMG in $IMGPATHS
 do
  
  #20240531 substitute PR...
  if [ "${DISTRO_COMPAT_VERSION}" == "scarthgap" ];then
   DB_version="$(echo -n "$aIMG" | rev | cut -f 2 -d '/' | rev)-${PR}"
  else
   DB_version="$(echo -n "$aIMG" | rev | cut -f 2 -d '/' | rev)"
  fi
  DB_nameonly="$(echo -n "$aIMG" | rev | cut -f 3 -d '/' | rev)"
  [ "$(echo -n "$DB_nameonly" | cut -f 1 -d '-')" == "packagegroup" ] && continue #ignore pkgs named packagegroup-*
  echo -n "${DB_nameonly} "
  DB_pkgname="${DB_nameonly}-${DB_version}"
  DB_fullfilename="${DB_pkgname}-${aCAT}.tar.xz"
  DB_path="${DISTRO_COMPAT_VERSION}"
  
  DB_dependencies=''; DB_description=''
  #xDB_nameonly="$(echo -n "$DB_nameonly" | sed -e 's%\.%\\.%g' -e 's%\+%\\+%g')" #20221223 escape . +
  #...um, no, in basic regex + is not a special char. just escape .
  xDB_nameonly="$(echo -n "$DB_nameonly" | sed -e 's%\.%\\.%g')" #20221223
  DB_description="$(grep "^${xDB_nameonly} " /tmp/0pre-oe/0pre-oe-descriptions | cut -f 2- -d ' ' | sed -e 's%[^a-zA-Z0-9_. -]%%g')"
  DEPENDS0="$(grep "^${xDB_nameonly} " /tmp/0pre-oe/0pre-oe-dependencies | cut -f 2- -d ' ')"
  
  #better way to find deps.... note, using this in 0pre-oe-add
  FLGdep=0
  DEPENDSx=''
  if [ -f ${OEPATH}/${BUILDFOLDER}/task-depends.dot ];then
   #20221223 dep with "." was getting truncated, ex glib-2.0 to glib-2, fixed...
   DEPENDSx="$(grep "^\"${xDB_nameonly}\.do_prepare_recipe_sysroot" ${OEPATH}/${BUILDFOLDER}/task-depends.dot | cut -f 4 -d '"' | sed -e 's%\.do_.*%%' | grep -vE "^${xDB_nameonly}$|^${xDB_nameonly} |\-native|\-cross|packagegroup" | sort -u)"
  fi
  if [ "$DEPENDSx" ];then
   DEPENDS0="$(echo "$DEPENDSx" | tr '\n' ' ' | sed -e 's% $%%')"
   FLGdep=1
  fi
  
  xDB_description="$DB_description"
  [ "$DB_description" = "" ] && xDB_description="nothing"
  DB_category="$(${FIND_CAT} $DB_nameonly "$xDB_description")" #see updated find_cat
  
  #lookup generic names...
  DEPENDS=''
  echo -n '' > /tmp/0pre-oe/0pre-oe-depends
  if [ $FLGdep -eq 0 ];then
   if [ "$DEPENDS0" ];then
    for ADEP in $DEPENDS0
    do
     GENDEP="$(cat /tmp/0pre-oe/0pre-oe-split2gen-namesXXX /tmp/0pre-oe/0pre-oe-split2gen-names | grep " ${ADEP} " | cut -f 1 -d '|')" #170427
     [ ! "$GENDEP" ] && GENDEP="$ADEP"
     [ "$GENDEP" != "$DB_nameonly" ] && echo "$GENDEP" >> /tmp/0pre-oe/0pre-oe-depends
    done
   fi
   [ -s /tmp/0pre-oe/0pre-oe-depends ] && DEPENDS="$(sort -u /tmp/0pre-oe/0pre-oe-depends | tr '\n' ' ' | sed -e 's% $%%')"
  else
   DEPENDS="$DEPENDS0"
  fi
  
  [ "$DEPENDS" ] && DB_dependencies="$(echo -n "$DEPENDS" | sed -e 's%^%+%' -e 's% %,+%g' -e 's%,$%%' | sed -e 's% %%g' -e 's%,$%%' -e 's%+$%%')"
  
  DB_homepage="$(grep "^${xDB_nameonly} " /tmp/0pre-oe/0pre-oe-homepages | cut -f 2- -d ' ')"
  [ "$DB_homepage" ] && echo "${DB_nameonly} ${DB_homepage}" >> ../PKGS_HOMEPAGES
  
  #strip the files...
  echo "Stripping files..."
  [ -d ${aIMG}XXX ] && rm -rf ${aIMG}XXX
  cp -a ${aIMG} ${aIMG}XXX
  
  #need to cast the net wider...
  find ${aIMG}XXX -mindepth 2 -type f 2>/dev/null |
  while read ONEFILE
  do
   [ "$ONEFILE" == "" ] && continue
   ONENOT="$(echo "${ONEFILE/*imageXXX/}" | grep -E 'firmware|/share/|/doc/|/include/|/man/|/var/|/root/|/dev/|/font/')" #20201014
   [ "$ONENOT" ] && continue
   ONEBASE="`basename "$ONEFILE"`"
   [ "$ONEBASE" == "e3" ] && continue #cannot be stripped.
   [ "$ONEBASE" == "QtWeb" ] && continue #cannot be stripped.
   if [ "$(file "$ONEFILE" | grep -oE 'ELF.*executable|ELF.*shared')" != "" ];then
    echo -n " ${ONEBASE}"
    ./${CROSSSTRIP} --strip-unneeded "$ONEFILE"
   fi
  done
  sync
   
  #20240127 separate release from version. ex: 
  #acl-2.3.1-r6|acl|2.3.1-r6||BuildingBlock|628K|kirkstone|acl-2.3.1-r6-nocona-64.tar.xz|+attr|Utilities for managing POSIX Access Control Lists|oe|kirkstone||
  #change to:
  #acl-2.3.1-r6|acl|2.3.1|r6|BuildingBlock|628K|kirkstone|acl-2.3.1-r6-nocona-64.tar.xz|+attr|Utilities for managing POSIX Access Control Lists|oe|kirkstone||
  DB_version2="$(echo -n "${DB_version}" | sed -e 's%-r[0-9]*$%%')"
  DB_pkgrelease="$(echo -n "${DB_version}" | sed -e 's%.*-\(r[0-9]*\)$%\1%')"
  
  #20221223 getting this odd dep: +do_prepare_recipe_sysrootn:2
  # also, some just make db file bigger: +glibc +gcc-runtime +base-files +base-passwd +initscripts +update-rc.d +xorgproto
  # 20221224 more: +autoconf-archive +bash-completion +compiler-rt +libstd-rs +shadow*
  DBdepsfixed="$(echo -n "$DB_dependencies" | tr ',' '\n' | grep -vE '^\+do_prepare|^\+glibc$|^\+gcc-runtime$|^\+base-files$|^\+base-passwd$|^\+initscripts$|^\+update-rc\.d$|^\+xorgproto$|^\+autoconf-archive$|^\+bash-completion$|^\+compiler-rt$|^\+libstd-rs$|^\+shadow' | tr '\n' ',' | sed -e 's%,$%%' -e 's%,$%%')"
  DB_dependencies="$DBdepsfixed"
  
  #this has to be done after stripping...
  DB_size="$(du -s -k ${aIMG}XXX | cut -f 1)K"
  DBENTRY="$DB_pkgname|$DB_nameonly|$DB_version2|$DB_pkgrelease|$DB_category|${DB_size}|$DB_path|$DB_fullfilename|$DB_dependencies|$DB_description|oe|$DISTRO_COMPAT_VERSION||"
  echo "$DBENTRY" >> $PKGLISTS_COMPAT
  
  sync
  echo ; echo '...done'
  
  #export the package...
  echo "${DBENTRY}${aCAT}|${DB_homepage}|" > ${aIMG}XXX/pkg.specs #maybe useful to have in the pkg.
  cd ${aIMG}XXX
  tar -c -f  ${OEPATH}/../packages-oe-${DISTRO_COMPAT_VERSION}/${DB_pkgname}-${aCAT}.tar *
  cd "$OEPATH"
  cd ../packages-oe-${DISTRO_COMPAT_VERSION}
  xz ${DB_pkgname}-${aCAT}.tar
  cd "$OEPATH"
  sync
 done
done
echo
echo '...done'

#sort...
echo
echo "Sorting: ${PKGLISTS_COMPAT} ../PKGS_HOMEPAGES ..."
sort --key=1 --field-separator='|' $PKGLISTS_COMPAT > /tmp/0pre-oe/PKGLISTS_COMPAT
mv -f /tmp/0pre-oe/PKGLISTS_COMPAT $PKGLISTS_COMPAT
sort --key=1,1 --field-separator=" " --unique ../PKGS_HOMEPAGES > /tmp/woof-homepages.sorted
mv -f /tmp/woof-homepages.sorted ../PKGS_HOMEPAGES
sync
echo '...done'
echo
echo "Binary packages have been exported to folder ../packages-oe-${DISTRO_COMPAT_VERSION}"
echo "A Puppy-format pkg db has been created, name '${PKGLISTS_COMPAT}'"
echo "A list of pkg homepages has been created in file '../PKGS_HOMEPAGES'"

###end###
